#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <string.h>
#include <errno.h>

// Generated by disassembling add.so using objdump
char add[] = "\xf3\x0f\x1e\xfa\x55\x48\x89\xe5\x89\x7d\xfc\x89\x75\xf8\x8b\x55\xfc\x8b\x45\xf8\x01\xd0\x5d\xc3";
int main(int argc, char **argv, char **envp)
{
    // Allocate memory. We will be storing add function here.
    char *code = (char *)malloc(100);

    // Compute page
    unsigned long page = ((unsigned long)code) & ~(getpagesize() - 1);

    // Set the executable bit so that add function stored in variable code
    // is executable
    int result = mprotect((char *)page, getpagesize(), PROT_READ | PROT_WRITE | PROT_EXEC);
    if (result != 0)
    {
        perror("Failed to make variable code executable");
        exit(-1);
    }

    // Copy
    memcpy(code, add, sizeof(add));

    // Create function pointer
    int (*addPtr)(int, int) = (int (*)(int, int))((void *)code);

    // Invoke the method nad print result
    if (argc < 3)
    {
        puts("Insufficient command line arguments");
        exit(-1);
    }

    int num1 = atoi(argv[1]);
    int num2 = atoi(argv[2]);
    result = addPtr(num1, num2);
    printf("%d+%d=%d\n", num1, num2, result);

    // Release allocated memory
    free(code);
}